#target indesignCheckInDesign();CheckPhotoshop();var myRepReduced = myRepEnlarged = myRep100Percent = myRepNotProp = myRepLocked = myPsError = myRepResized = "";var myOldTransPreferences;var myIsJpeg;var myResampleMethods = [ "ResampleMethod.NEARESTNEIGHBOR", "ResampleMethod.BILINEAR", "ResampleMethod.BICUBIC", "ResampleMethod.BICUBICSMOOTHER",  "ResampleMethod.BICUBICSHARPER" ];var myResampleMethodsNames = [ "Nearest Neighbor", "Bilinear", "Bicubic", "Bicubic Smoother",  "Bicubic Sharper" ];var myResampleMethodsTips = [ "Preserve hard edges", "Adds pixels by averaging the color values of surrounding pixels - produces medium-quality results. ", "Best for smooth gradients", "Best for enlargement",  "Best for reduction" ];var myValidLinkTypes = [ "TIFF", "Photoshop", "JPEG", "EPS", "Portable Network Graphics (PNG)", "ScitexCT", "PC PaintBrush", "CompuServe GIF", "Windows Bitmap" ];var myTotalLinksCount;var mySelectedLinks = ProcessSelection();var mySettings = GetSettings();if (!CreateDialog()) {	exit();}var myDoc = app.activeDocument;if (app.version.substr(0, 5) == "6.0.4") {	var myRememberPreserveBounds = app.imagePreferences.preserveBounds;	app.imagePreferences.preserveBounds = false;}var myAllLinks = GetAllLinks();myDoc.links.everyItem().insertLabel("Status", "");if (mySettings.checkMissingCb) CheckMissingLinks();if (mySettings.checkResCb) CheckEffectivePpi();var myCompletedLinks = [];UpdateAllOutdatedLinks();SetTransformPrefs();SetDisplayDialogs("NO");CollectImages(myAllLinks);//------------------------------------------------ End of the script -------------------------------------------------app.transformPreferences.properties = myOldTransPreferences;if (myRememberPreserveBounds != undefined) app.imagePreferences.preserveBounds = myRememberPreserveBounds;SetDisplayDialogs("ALL");if (myCompletedLinks.length > 0) {	if (mySettings.reportCb) CreateReport();	UpdateAllOutdatedLinks();	alert(localize({en: 'All done.', fr: 'Termin\u00E9', ru: 'Всё готово.'}), localize({en: 'Resize Images Script', fr: 'Script de redimensionnement d\'images', ru: 'Пересчёт картинок'}));}else {	alert(localize({en: 'Nothing has been resized.', fr: 'Aucune image retaill\u00E9e' , ru: 'Ничего не было пересчитано.'}), localize({en: 'Resize Images Script', fr: 'Script de redimensionnement d\'images', ru: 'Пересчёт картинок'}));}//*************************************************** FUNCTIONS  *************************************function CreateDialog() {	var dlg = new Window('dialog', localize({en: 'Resize Images', fr: 'Redimensionnement d\'images (v. 2.27)', ru: 'Пересчёт картинок'}));	// ------------------- Containers ---------------------------	dlg.orientation = 'column';	dlg.alignChildren = 'top';	dlg.btnPnl = dlg.add('panel', undefined, localize({en: 'Ignored folders', fr: 'Ignorer les dossiers suivants', ru: 'Запрещённые папки'}));	dlg.btnPnl.orientation = 'column';	dlg.btnPnl.helpTip = localize({en: 'The files in these folders will not be resized', fr: 'Les fichiers contenus dans ces dossiers ne seront pas retaill\u00E9s', ru: 'Файлы в этих папках не будут пересчитаны'});	// ---------------------- Listbox --------------------------	dlg.btnPnl.listBox = dlg.btnPnl.add('listbox', undefined, mySettings.ignoredFolders, {multiselect:true});	if (File.fs == "Macintosh" && $.locale != "ru") {		var myListBoxBounds = [0, 0, 530, 160];	}	else if (File.fs == "Macintosh" && $.locale == "ru")  {		var myListBoxBounds = [0, 0, 595, 160];	}	else if (File.fs == "Windows" && $.locale != "ru")  {		var myListBoxBounds = [0, 0, 467, 160];	}	else if (File.fs == "Windows" && $.locale == "ru") {		var myListBoxBounds = [0, 0, 580, 160];	}	else {		var myListBoxBounds = [0, 0, 564, 160];	}		dlg.btnPnl.listBox.bounds = myListBoxBounds;		// Buttons	dlg.btnPnl.grp = dlg.btnPnl.add('group');	dlg.btnPnl.grp.orientation = 'row';	dlg.btnPnl.grp.addBtn = dlg.btnPnl.grp.add('button', undefined, localize({en: 'Add', ru: 'Добавить', fr: 'Ajouter'}));	dlg.btnPnl.grp.addBtn.helpTip = localize({en: 'Add a  folder to the list', fr: 'Ajouter un dossier \u00E0 la liste', ru: 'Добавить папку в список'});	dlg.btnPnl.grp.removeBtn = dlg.btnPnl.grp.add('button', undefined, localize({en: 'Remove', fr: 'Supprimer', ru: 'Убрать'}));	dlg.btnPnl.grp.removeBtn.helpTip = localize({en: 'Remove the selected folders from the list', fr: 'Supprimer les dossiers s\u00E9lectionn\u00E9s de la liste', ru: 'Убрать выделенные папки из списка'});	dlg.btnPnl.grp.remAllBtn = dlg.btnPnl.grp.add('button', undefined, localize({en: 'Remove All', fr: 'Supprimer tout', ru: 'Убрать все'}));	dlg.btnPnl.grp.remAllBtn.helpTip = localize({en: 'Remove all  folders from the list', fr: 'Supprimer tous les dossiers de la liste', ru: 'Убрать все папки из списка'});	// Group	dlg.grp = dlg.add('group');	dlg.grp.orientation = 'row';	dlg.grp.alignChildren = 'top';	// Checkboxes 	dlg.grp.checkBoxPnl = dlg.grp.add('panel', undefined, localize({en: 'Options', ru: 'Настройки', fr: 'Options'}));	dlg.grp.checkBoxPnl.alignChildren = 'left';		dlg.grp.checkBoxPnl.masterPagesCb = dlg.grp.checkBoxPnl.add('checkbox', undefined, localize({en: 'Resize images on master pages', ru: 'Пересчитывать на мастер-страницах', fr: 'Retailler les images sur les gabarits'}));	dlg.grp.checkBoxPnl.masterPagesCb.value = mySettings.masterPagesCb;		dlg.grp.checkBoxPnl.anchoredCb = dlg.grp.checkBoxPnl.add('checkbox', undefined, localize({en: 'Resize anchored images', ru: 'Пересчитывать привязанные объекты', fr: 'Retailler les images ancr\u00E9es'}));	dlg.grp.checkBoxPnl.anchoredCb.value = mySettings.anchoredCb;		dlg.grp.checkBoxPnl.pasteboardCb = dlg.grp.checkBoxPnl.add('checkbox', undefined, localize({en: 'Resize images on pasteboard', ru: 'Пересчитывать на рабочем столе', fr: 'Retailler les images sur le plan de travail'}));	dlg.grp.checkBoxPnl.pasteboardCb.value = mySettings.pasteboardCb;		dlg.grp.checkBoxPnl.checkMissingCb = dlg.grp.checkBoxPnl.add('checkbox', undefined, localize({en: 'Check for missing links', ru: 'Проверять потерянные ссылки', fr: 'V\u00E9rifier les liens manquants'}));	dlg.grp.checkBoxPnl.checkMissingCb.value = mySettings.checkMissingCb;		dlg.grp.checkBoxPnl.reportCb = dlg.grp.checkBoxPnl.add('checkbox', undefined, localize({en: 'Create report on the desktop', ru: 'Создать отчёт  на рабочем столе', fr: 'Cr\u00E9er un rapport sur le bureau'}));	dlg.grp.checkBoxPnl.reportCb.value = mySettings.reportCb;	dlg.grp.checkBoxPnl.reportCb.helpTip = localize({en: 'If checked, a text file containing report about еру script operation will be created on the desktop', ru: 'Создать файл отчёта о результатах работы скрипта на рабочем столе', fr: 'Cocher cette case pour cr\u00E9er un report au format texte sur le d\u00E9roulement du script'});	// Minimum resolution	dlg.grp.checkBoxPnl.subGrp = dlg.grp.checkBoxPnl.add('group');	dlg.grp.checkBoxPnl.subGrp.orientation = 'row';	dlg.grp.checkBoxPnl.subGrp.checkResCb = dlg.grp.checkBoxPnl.subGrp.add('checkbox', undefined, localize({en: 'Warn if effective resolution is less then', ru: 'Предупреждать если разрешение меньше', fr: 'M\'avertir si la r\u00E9solution est inf\u00E9rieure \u00E0'}));	dlg.grp.checkBoxPnl.subGrp.checkResCb.value = mySettings.checkResCb;	dlg.grp.checkBoxPnl.subGrp.checkResCb.helpTip = localize({en: 'If resolution of some image is below the limit, the script will warn you about that. ', ru: 'Если разрешение какой-либо картинки ниже заданного уровня, то скрипт предупредит об этом.', fr: 'Si la r\u00E9solution est en de\u00E7\u00E0 de la limite, le script vous avertira'});	dlg.grp.checkBoxPnl.subGrp.et = dlg.grp.checkBoxPnl.subGrp.add('edittext', undefined, mySettings.minimumRes);	dlg.grp.checkBoxPnl.subGrp.et.myValue = mySettings.minimumRes;	dlg.grp.checkBoxPnl.subGrp.et.onChange = ResEtOnChange;	dlg.grp.checkBoxPnl.subGrp.st = dlg.grp.checkBoxPnl.subGrp.add('statictext', undefined, 'dpi');		// Only selected image	dlg.grp.checkBoxPnl.selImgCb = dlg.grp.checkBoxPnl.add('checkbox', undefined, localize({en: 'Resize only ' + ((mySelectedLinks.length > 1) ? + mySelectedLinks.length + ' selected images.' : 'the selected image.'), ru: 'Пересчитывать только выделенные картинки', fr: 'Redimensionner uniquement les images s\u00E9lectionn\u00E9es'}));		// Desired resolution	dlg.grp.checkBoxPnl.desiredResGrp = dlg.grp.checkBoxPnl.add('group');	dlg.grp.checkBoxPnl.desiredResGrp.orientation = 'row';	dlg.grp.checkBoxPnl.desiredResGrp.st1 = dlg.grp.checkBoxPnl.desiredResGrp.add('statictext', undefined, localize({en: 'Desired resolution', ru: 'Желаемое разрешение', fr: 'R\u00E9solution d\u00E9sir\u00E9e'}));	dlg.grp.checkBoxPnl.desiredResGrp.et = dlg.grp.checkBoxPnl.desiredResGrp.add('edittext', undefined, mySettings.desiredRes);	// dlg.grp.checkBoxPnl.desiredResGrp.et.myValue  = mySettings.desiredRes;	dlg.grp.checkBoxPnl.desiredResGrp.et.onChange = ResEtOnChange;	dlg.grp.checkBoxPnl.desiredResGrp.st2 = dlg.grp.checkBoxPnl.desiredResGrp.add('statictext', undefined, 'dpi');	// Don't resize enlarged images	dlg.grp.checkBoxPnl.enlargedCb = dlg.grp.checkBoxPnl.add('checkbox', undefined, localize({en: 'Don\'t resample enlarged images', ru: 'Не пересчитывать увеличенные картинки', fr: 'Ne pas r\u00E9\u00E9chantillonner les images agrandies'}));	dlg.grp.checkBoxPnl.enlargedCb.value = mySettings.enlargedCb;		// Resize reduced images without resampling	dlg.grp.checkBoxPnl.reducedCb = dlg.grp.checkBoxPnl.add('checkbox', undefined, localize({en: 'Resize reduced images without resampling', ru: 'Пересчитывать уменьшенные картинки без ресамплинга,', fr: 'Redimensionner les images sans r\u00E9\u00E9chantillonnage'}));	dlg.grp.checkBoxPnl.reducedCb.value = mySettings.reducedCb;	dlg.grp.checkBoxPnl.reducedSt = dlg.grp.checkBoxPnl.add('statictext', undefined, localize({en: 'if effective dpi is less then desired', ru: ' если еффективное разрешение меньше оптимального', fr:'si la r\u00E9solution effective est inf\u00E9rieure \u00E0 la r\u00E9solution d\u00E9sir\u00E9e'}));	dlg.grp.checkBoxPnl.reducedSt.indent = 18;	if (mySelectedLinks.length >= 1) {		try {			dlg.grp.checkBoxPnl.selImgCb.enabled = true;			dlg.grp.checkBoxPnl.selImgCb.value = mySettings.selImgCb;		}			catch(e) {			$.writeln("Error: " + e.message);			dlg.grp.checkBoxPnl.selImgCb.enabled = false;			dlg.grp.checkBoxPnl.selImgCb.value = false;		}	}	else {		dlg.grp.checkBoxPnl.selImgCb.enabled = false;		dlg.grp.checkBoxPnl.selImgCb.value = false;		dlg.grp.checkBoxPnl.selImgCb.text = localize({en: 'Resize only selected images.', ru: 'Пересчитывать только выделенные картинки', fr: 'Ne redimensionner que les images s\u00E9lectionn\u00E9es'});	}	dlg.grp.checkBoxPnl.selImgCb.addEventListener('click', SelImgCbClick);		if (dlg.grp.checkBoxPnl.selImgCb.value && dlg.grp.checkBoxPnl.selImgCb.enabled) { // ???		dlg.grp.checkBoxPnl.masterPagesCb.enabled =  false;		dlg.grp.checkBoxPnl.anchoredCb.enabled =  false;		dlg.grp.checkBoxPnl.pasteboardCb.enabled =  false;	}	// Subgroup of dropdownlists	dlg.grp.subGrp = dlg.grp.add('group');	dlg.grp.subGrp.orientation = 'column';		dlg.grp.subGrp.resamplePanel = dlg.grp.subGrp.add('panel', undefined, localize({en: 'Resample method: ', ru: 'Метод пересчёта: ', fr: 'M\u00E9thode de r\u00E9\u00E9chantillonnage :'}));	dlg.grp.subGrp.resamplePanel.alignment = 'left';	dlg.grp.subGrp.resamplePanel.alignChildren = 'left';		dlg.grp.subGrp.resamplePanel.st1 = dlg.grp.subGrp.resamplePanel.add('statictext', undefined, localize({en: 'Reduced images', ru: 'Уменьшенные картинки', fr: 'des images r\u00E9duites'}));	dlg.grp.subGrp.resamplePanel.reducedDropDownList = dlg.grp.subGrp.resamplePanel.add('dropdownlist', undefined, myResampleMethodsNames);	dlg.grp.subGrp.resamplePanel.reducedDropDownList.selection = dlg.grp.subGrp.resamplePanel.reducedDropDownList.items[mySettings.reducedDropDownList];	dlg.grp.subGrp.resamplePanel.reducedDropDownList.helpTip = myResampleMethodsTips[mySettings.reducedDropDownList];		dlg.grp.subGrp.resamplePanel.st2 = dlg.grp.subGrp.resamplePanel.add('statictext', undefined, localize({en: 'Enlarged images', ru: 'Увеличенные картинки', fr: 'des images agrandies'}));	dlg.grp.subGrp.resamplePanel.enlargedDropDownList = dlg.grp.subGrp.resamplePanel.add('dropdownlist', undefined, myResampleMethodsNames);	dlg.grp.subGrp.resamplePanel.enlargedDropDownList.selection = dlg.grp.subGrp.resamplePanel.enlargedDropDownList.items[mySettings.enlargedDropDownList];	dlg.grp.subGrp.resamplePanel.enlargedDropDownList.helpTip = myResampleMethodsTips[mySettings.enlargedDropDownList];	if (dlg.grp.checkBoxPnl.enlargedCb.value) dlg.grp.subGrp.resamplePanel.enlargedDropDownList.enabled = false;		// Resize and Cancel buttons	dlg.grp.subGrp.okBtn = dlg.grp.subGrp.add('button', undefined, localize({en: 'Resize', ru: 'Пересчитать', fr: 'Redimensionner'}));	dlg.grp.subGrp.cancelBtn = dlg.grp.subGrp.add('button', undefined, localize({en: 'Cancel', ru: 'Отменить', fr:'Annuler'}));// ----------------------- Functions --------------------------	function SelImgCbClick() {		if (this.value) {			dlg.grp.checkBoxPnl.masterPagesCb.enabled =  false;			dlg.grp.checkBoxPnl.anchoredCb.enabled =  false;			dlg.grp.checkBoxPnl.pasteboardCb.enabled =  false;		}		else {			dlg.grp.checkBoxPnl.masterPagesCb.enabled =  true;			dlg.grp.checkBoxPnl.anchoredCb.enabled =  true;			dlg.grp.checkBoxPnl.pasteboardCb.enabled =  true;		}	}// ---------------------------------------------------------------	dlg.btnPnl.grp.addBtn.onClick = function() {		var myFolder = Folder.selectDialog ("Select a folder");		if (myFolder != null) {			if (!IsInArray(myFolder.fsName, mySettings.ignoredFolders)) {				mySettings.ignoredFolders.push(myFolder.fsName);				var myBounds = dlg.btnPnl.listBox.bounds;				dlg.btnPnl.remove(dlg.btnPnl.listBox);				dlg.btnPnl.listBox = dlg.btnPnl.add('listbox', myBounds, mySettings.ignoredFolders, {multiselect:true});				dlg.btnPnl.listBox.bounds = myListBoxBounds;			}			else {				alert("This folder has been already added.");			}		}	}// ---------------------------------------------------------------	dlg.btnPnl.grp.removeBtn.onClick = function() {		if (dlg.btnPnl.listBox.selection != null) {			for (var i = dlg.btnPnl.listBox.selection.length - 1; i  >= 0; i --) {				mySettings.ignoredFolders.splice(dlg.btnPnl.listBox.selection[i].index, 1);				dlg.btnPnl.listBox.remove(dlg.btnPnl.listBox.selection[i]);			}		}	}// ---------------------------------------------------------------	dlg.btnPnl.grp.remAllBtn.onClick = function() {		dlg.btnPnl.listBox.removeAll();		mySettings.ignoredFolders = [];	}// ---------------------------------------------------------------	dlg.grp.subGrp.okBtn.onClick = function() {		// mySettings.ignoredFolders.splice(0, mySettings.ignoredFolders.length); // !!!		mySettings.ignoredFolders = [];		for (j = 0; j < dlg.btnPnl.listBox.items.length; j++) {			mySettings.ignoredFolders.push(dlg.btnPnl.listBox.items[j].text);		}		dlg.close(1);	}// ---------------------------------------------------------------	dlg.grp.subGrp.cancelBtn.onClick = function() {		dlg.close(0);	}// ---------------------------------------------------------------	dlg.grp.subGrp.resamplePanel.reducedDropDownList.onChange = function() {		this.helpTip = myResampleMethodsTips[dlg.grp.subGrp.resamplePanel.reducedDropDownList.selection.index];	}// ---------------------------------------------------------------	dlg.grp.subGrp.resamplePanel.enlargedDropDownList.onChange = function() {		this.helpTip = myResampleMethodsTips[dlg.grp.subGrp.resamplePanel.enlargedDropDownList.selection.index];	}// ---------------------------------------------------------------	dlg.grp.checkBoxPnl.enlargedCb.onClick = function() {		if (this.value) {			dlg.grp.subGrp.resamplePanel.enlargedDropDownList.enabled = false;		}		else {			dlg.grp.subGrp.resamplePanel.enlargedDropDownList.enabled = true;		}	}// ---------------------------------------------------------------	function ResEtOnChange() {		if (parseInt(this.text).toString() == "NaN") {			alert (this.text + localize({en: ' is not number!', ru: ' не цифра', fr: 'n\'est pas un nombre !'}));			this.text = "300";					}	}// ---------------------- Show dialog -------------------------------	var myDialogResult = dlg.show();	if (myDialogResult) {		mySettings.ignoredFolders = mySettings.ignoredFolders;		mySettings.masterPagesCb = dlg.grp.checkBoxPnl.masterPagesCb.value;		mySettings.anchoredCb = dlg.grp.checkBoxPnl.anchoredCb.value;		mySettings.pasteboardCb = dlg.grp.checkBoxPnl.pasteboardCb.value;		mySettings.checkMissingCb = dlg.grp.checkBoxPnl.checkMissingCb.value;		mySettings.reportCb = dlg.grp.checkBoxPnl.reportCb.value;				mySettings.checkResCb = dlg.grp.checkBoxPnl.subGrp.checkResCb.value;			mySettings.minimumRes = parseInt(dlg.grp.checkBoxPnl.subGrp.et.text); // ???		if (mySettings.minimumRes.toString() == "NaN") {			mySettings.minimumRes = 260;		}			mySettings.selImgCb = dlg.grp.checkBoxPnl.selImgCb.value;				mySettings.desiredRes = parseInt(dlg.grp.checkBoxPnl.desiredResGrp.et.text); // ???		if (mySettings.desiredRes.toString() == "NaN") {			mySettings.desiredRes = 300;		}			mySettings.enlargedCb = dlg.grp.checkBoxPnl.enlargedCb.value;		mySettings.reducedCb = dlg.grp.checkBoxPnl.reducedCb.value;				mySettings.reducedDropDownList = dlg.grp.subGrp.resamplePanel.reducedDropDownList.selection.index;		mySettings.enlargedDropDownList = dlg.grp.subGrp.resamplePanel.enlargedDropDownList.selection.index;		app.insertLabel("Kas_ResizeImages_Settings_ver2.0", mySettings.toSource());	}	return myDialogResult;}//--------------------------------------------------------------------------------------------------------------function whereIsTheLink(theLink){	while (theLink.constructor.name != 'Application') {		if (theLink instanceof Page) {			var myPageName = theLink.name;			return myPageName;		}		if (theLink instanceof Character) {			if (theLink.parentTextFrames[0] != undefined && theLink.parentTextFrames[0].constructor.name == "TextFrame") {				var thePage = whereIsTheLink(theLink.parentTextFrames[0]);			}			else if (theLink.parentTextFrames[0] == undefined && theLink.parent.constructor.name == "Story") {				var thePage = whereIsTheLink(theLink.parent.textContainers[theLink.parent.textContainers.length-1]);			}		}	theLink = theLink.parent;	myHierarchy += theLink.constructor.name + '|';	}		if (myHierarchy.lastIndexOf('|Page|MasterSpread|Document|Application|') != -1) {		return 'master page';	}	else if (myHierarchy.lastIndexOf('|MasterSpread|Document|Application|') != -1) {		return 'pasteboard of master page';	}	else if (myHierarchy.lastIndexOf('|Spread|Document|Application|') != -1) {		return 'pasteboard';	}	else if (myHierarchy.lastIndexOf('Image|Rectangle|Character|Page|') != -1) {		return 'anchored';	}	else {		return 'unknown';	}}//--------------------------------------------------------------------------------------------------------------function findLargestLink(myLink) {	var myMultyLinks = [];	for (var myCounter =  0; myCounter < myAllLinks.length; myCounter++) {		if (myLink.filePath == myAllLinks[myCounter].filePath) {			myMultyLinks.push(myAllLinks[myCounter]);		}	}	var myLargestLink = myMultyLinks[0];	for (var k =  1; k < myMultyLinks.length; k++) {		var theLink = myMultyLinks[k];		var myImage = theLink.parent;		var myHorScale = myImage.absoluteHorizontalScale;		var myVerScale = myImage.absoluteVerticalScale;		if (myHorScale > myLargestLink.parent.absoluteHorizontalScale) { // !!! Vertical			myLargestLink = theLink;		}	}	return myLargestLink;}//--------------------------------------------------------------------------------------------------------------function ResizeImage(myLink) {	var myResampleMethod, myResolution;	var myImagePath = myLink.filePath;	var myImage = myLink.parent;	var myFrame = myLink.parent.parent;	myIsJpeg = (myLink.linkType == "JPEG") ? true : false;	try {		myFrame.redefineScaling();	}	catch(err) {}	if (myFrame.locked || myFrame.itemLayer.locked)  {		myRepLocked += myImagePath + '\r';		return;	}	var myHorScale = Math.abs(myImage.absoluteHorizontalScale);	var myVerScale = Math.abs(myImage.absoluteVerticalScale);	var myEffPpi = (myImage.effectivePpi[0] < myImage.effectivePpi[1]) ? myImage.effectivePpi[0] : myImage.effectivePpi[1];//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	if (Math.round(myHorScale) == Math.round(myVerScale)) { // Proportional		if (Math.round(myHorScale) == 100) { // 100%			myRep100Percent += myImagePath + "\r";			return;		}		else if (myHorScale < 100) { // Reduced			if (myEffPpi < mySettings.desiredRes && mySettings.reducedCb == true) { // Effective resolution is less then desired				CreateBridgeTalkMessage(myImagePath, undefined, undefined, myEffPpi, "ResampleMethod.NONE");				setLink100percent(myLink);				myRepResized += myImagePath + " - " + Math.round(myHorScale) + "% x " + Math.round(myVerScale) + "% - Without resampling\r";			}			else {				CreateBridgeTalkMessage(myImagePath, myHorScale, myVerScale, mySettings.desiredRes, myResampleMethods[mySettings.reducedDropDownList]);				setLink100percent(myLink);				myRepResized += myImagePath + " - " + Math.round(myHorScale) + "% x " + Math.round(myVerScale) + "% - " + myResampleMethodsNames[mySettings.reducedDropDownList] + "\r";			}		}		else if (myHorScale > 100) { // Enlarged			if (mySettings.enlargedCb) {				CreateBridgeTalkMessage(myImagePath, undefined, undefined, myEffPpi, "ResampleMethod.NONE");				setLink100percent(myLink);				myRepResized += myImagePath + " - " + Math.round(myHorScale) + "% x " + Math.round(myVerScale) + "% - Without resampling\r";			}			else {				CreateBridgeTalkMessage(myImagePath, myHorScale, myVerScale, mySettings.desiredRes, myResampleMethods[mySettings.enlargedDropDownList]);				setLink100percent(myLink);				myRepResized += myImagePath + " - " + Math.round(myHorScale) + "% x " + Math.round(myVerScale) + "% - " + myResampleMethodsNames[mySettings.enlargedDropDownList] + "\r";			}		}	}	else if ((Math.round(myHorScale) != Math.round(myVerScale)) && (LinkUsage(myLink) == 1)) { // Not proportional and used once		var myResampleMethodName;		if (myHorScale < 100 && myVerScale < 100) {			myResampleMethod = myResampleMethods[mySettings.reducedDropDownList];			myResampleMethodName = myResampleMethodsNames[mySettings.reducedDropDownList];		}		else if (myHorScale > 100 && myVerScale > 100) {			myResampleMethod = myResampleMethods[mySettings.enlargedDropDownList];			myResampleMethodName = myResampleMethodsNames[mySettings.enlargedDropDownList];		}		else { // One side reduced another enlarged			myResampleMethod = "ResampleMethod.BICUBIC";			myResampleMethodName = "Without resampling"; // ???		}		CreateBridgeTalkMessage(myImagePath, myHorScale, myVerScale, undefined, myResampleMethod);		setLink100percent(myLink);		myRepResized += myImagePath + " - " + Math.round(myHorScale) + "% x " + Math.round(myVerScale) + "% - " + myResampleMethod + "\r";	}}//--------------------------------------------------------------------------------------------------------------function setLink100percent(myLink) {//$.write("setLink100percent\nmyLink.status" + myLink.status + "\n");	try {		var myLink = myLink.update();	}	catch(err) {//~ 		$.write("myLink.update error: " + err);	}	var myImage = myLink.parent;	if (myLink.parent.absoluteHorizontalScale > 0 && myLink.parent.absoluteVerticalScale > 0) {		myImage.absoluteHorizontalScale = 100;		myImage.absoluteVerticalScale = 100;	}	myLink.insertLabel("Status", "Ready");	myCompletedLinks.push(myLink);}//--------------------------------------------------------------------------------------------------------------function UpdateAllOutdatedLinks() {	for (var myCounter = myDoc.links.length-1; myCounter >= 0; myCounter--) {		var myLink = myDoc.links[myCounter];		if (myLink.status == LinkStatus.linkOutOfDate) {			myLink.update();		}	}}//--------------------------------------------------------------------------------------------------------------function SetDisplayDialogs(Mode) {	var bt = new BridgeTalk;	bt.target = "photoshop";	var myScript = 'app.displayDialogs = DialogModes.' + Mode + ';';	bt.body = myScript;	bt.send();}//--------------------------------------------------------------------------------------------------------------function CreateReport() {	var myDate = new Date();	var myReport = myDate.toLocaleString() + localize ({en: '\rFile: ', fr: '\rFichier :'}) + myDoc.fullName.fullName + '\r\r';	if (myRepResized != '') {		myReport += localize({en: 'The following images were resized:\r', ru: 'Были пересчитаны следующие картинки:\r', fr: 'Les images suivantes ont \u00E9t\u00E9 redimensionn\u00E9es :\r'}) + myRepResized + '\r';	}//~ 	if (myRepEnlarged != '') {//~ 		myReport +=  localize({en: 'The following images were resized without resampling:\r', ru: 'С увеличением были пересчитаны следующие картинки:\r', fr: 'Les images suivantes seront redimension\u00E9es sans r\u00E9\u00E9chantillonnage'}) + myRepEnlarged + '\r';//~ 	}	if (myRep100Percent != '') {		myReport +=  localize({en: 'The following images were not resized, as they had already been placed at 100%:\r', ru: 'На 100% уже стояли  картинки:\r', fr: 'Les images suivantes \u00E9taient d\u00E9j\u00E0 \u00E0 100%, \relles n\'ont pas \u00E9t\u00E9 redimensionn\u00E9es :\r'}) + myRep100Percent + '\r';	}//~ 	if (myRepNotProp != '') {//~ 		myReport += localize({en: 'The following images were resized non-uniformly:\r', ru: 'Непропорционально были пересчитаны следующие картинки:\r', fr: 'Le redimensionnement de ces images ne sera pas uniforme'}) + myRepNotProp + '\r';//~ 	}	if (myRepLocked != '') {		myReport +=  localize({en: 'The following images were not resized because they are locked:\r', ru: 'Не были пересчитаны следующие картинки, потому что они заблокированы:\r', fr: 'Les images suivantes \u00E9taient verrouill\u00E9es, elles n\'ont pas \u00E9t\u00E9 redimensionn\u00E9es :'}) + myRepLocked + '\r';	}	if (myPsError != '') {		myReport +=  localize({en: 'The following images were not resized (probably because they are damaged):\r', ru: 'Не были пересчитаны следующие картинки, потому что они вероятно запорченные:\r', fr: 'Les images suivantes n\'ont pas \u00E9t\u00E9 redimensionn\u00E9es (probablement parce qu\'elles sont endommag\u00E9es :\r'}) + myPsError + '\r';	}	myReport +=  '----------------------------------------------------\r';	WriteToFile(myReport);}//--------------------------------------------------------------------------------------------------------------function WriteToFile(myText) {	myFile = new File("~/Desktop/Report.txt");	if ( myFile.exists ) {		myFile.open("e");		myFile.seek(0, 2);	}	else {		myFile.open("w");	}	if (File.fs == "Macintosh" && $.locale == "ru") {		myFile.encoding = "X-MAC-CYRILLIC";	}	myFile.write(myText); 	myFile.close();}//--------------------------------------------------------------------------------------------------------------function IsInArray(myString, myArray) {	for (x in myArray) {		if (myString == myArray[x]) {			return true;		}	}	return false;}//--------------------------------------------------------------------------------------------------------------function err(e, icon){	alert(e, localize({en: 'Resize Images Script', ru: 'Пересчёт картинок', fr:'Script de redimensionnement d\'images'}), icon);	exit();}//--------------------------------------------------------------------------------------------------------------function CheckPhotoshop() {  	var mySpecifier = BridgeTalk.getSpecifier("photoshop");	if (mySpecifier == null) err(localize({en: 'The script can\'t run because Photoshop is not installed.', ru: 'Скрипт нельзя запустить, поскольку Фотошоп не установлен.', fr: 'Le script ne peut être lanc\u00E9 car Photoshop n\'est pas install\u00E9.'}));	var myPS_version = mySpecifier.search(/\d+/);	if (myPS_version < 10) err(localize({en: 'The script requires Photoshop version \"11\" or higher, but you have version \"', ru: 'Для работы скрипта необходим по крайней мере Фотошоп версии \"11\", а у вас установлена ', fr: 'Ce script n\u00E9cessite au moins la version 11 de Photoshop. Vous avez la version : '}) + myPS_version + localize({en: '\" installed.', ru: ' версия.', fr:'install\u00E9e'}));	if (!BridgeTalk.isRunning ("photoshop")) {		var myConfirm = confirm(localize({en: 'Photoshop is not running. Do you want to launch it?', ru: 'Фотошоп не запущен. Хотите его запустить?', fr: 'Photoshop n\'est pas ouvert. Voulez-vous le lancer ?'}), false, localize({en: 'Resize Images Script', ru: 'Пересчёт картинок', fr:'Script de redimensionnement d\'images'}));		if (myConfirm) {			BridgeTalk.launch("photoshop");			err(localize({en: 'Wait untill Photoshop finishes loading and run the script again.', ru: 'Подождите пока загрузиться Фотошоп и запустите скрипт снова', fr:'Attendez que Photoshop finisse de se lancer et r\u00E9ex\u00E9cutez le script'}), false);		}		else {			exit();		}	}}//--------------------------------------------------------------------------------------------------------------function CheckInDesign() {	if (app.documents.length == 0) {		err(localize({en: 'No documents are open. Please open a document and try again.', ru: 'Не открыт ни один документ, откройте файл и попробуйте снова.', fr: 'Aucun document ouvert. Ouvrez un document svp et r\u00E9essayez.'}));	}	if (!app.activeDocument.saved) {		err(localize({en: 'The current document has not been saved since it was created. Please save the document and try again.', ru: 'Этот файл ещё ни разу не был сохранен. Сохраните его и попробуйте запустить скрипт снова.', fr:'Le document actif n\'a pas \u00E9t\u00E9 enregistr\u00E9 depuis sa cr\u00E9ation. \rSvp sauvez votre document et essayez \u00E0 nouveau.'}));	}	if (app.activeDocument.allGraphics.length == 0) {		err(localize({en: 'The current document contains no images.', ru: 'В этом файле нет растровых картинок.', fr:'Le document actif ne contient aucune image.'}));	}}//--------------------------------------------------------------------------------------------------------------function SetTransformPrefs() {	myOldTransPreferences = app.transformPreferences.properties;	app.transformPreferences.transformationsAreTotals = true;	app.transformPreferences.showContentOffset = true;	app.transformPreferences.dimensionsIncludeStrokeWeight = true;	app.transformPreferences.whenScaling = WhenScalingOptions.APPLY_TO_CONTENT;}//--------------------------------------------------------------------------------------------------------------function CheckLink(myLink) {	if (myLink.parent.constructor.name == "ImportedPage") return false; // link is inside of indd-file	if (!IsInArray(myLink.linkType, myValidLinkTypes)) return false;	if (myLink.linkType == "EPS") {		if (myLink.linkXmp.creator.indexOf("Adobe Photoshop") == -1) return false; // illustrator EPS	}	if (myLink.parent.space == "Black and White") return false; // bitmap	if (myLink.status != LinkStatus.NORMAL) return false;	if (IsInArray(new File(myLink.filePath).parent.fsName, mySettings.ignoredFolders)) return false; // in ignored folders//~ 	var myPlacement = whereIsTheLink(myLink);//~ 	if (!mySettings.pasteboardCb && myPlacement == 'pasteboard')  return false;//~ 	if (!mySettings.anchoredCb && myPlacement == 'anchored')  return false;//~ 	if (!mySettings.masterPagesCb && myPlacement == 'master page')  return false;//~ 	if ((!mySettings.masterPagesCb && !mySettings.pasteboard) && myPlacement == 'pasteboard of master page')  return false;	return true;}//--------------------------------------------------------------------------------------------------------------function CollectImages() {	var myLinks = [];	var myMultiUsedLinks = [];	for (var myCounter =  0; myCounter < myAllLinks.length; myCounter++) {		var myLink = myAllLinks[myCounter];		if (CheckLink(myLink)) {			var myLinkUsedTimes = LinkUsage(myLink);			if (myLinkUsedTimes == 1) {				myLinks.push(myLink);			}			else if (myLinkUsedTimes > 1) {				var myLargestLink = findLargestLink(myLink); // !!!				if (!IsObjInArray(myLargestLink, myMultiUsedLinks)) {					myMultiUsedLinks.push(myLargestLink);				}			}		}	}		if (myMultiUsedLinks.length > 0) {		for (k = 0; k < myMultiUsedLinks.length; k++) {			myLinks.push(myMultiUsedLinks[k]);		}	}			if (myLinks.length > 0) {		ProcessImages(myLinks);	}	if (myLinks.length == 0 && myMultiUsedLinks.length == 0) {		err(localize({en: 'No suitable images to resize.', ru: 'Нет подходящих картинок для пересчёта.', fr:'Aucune image valable \u00E0 redimensionner'}));	}}//--------------------------------------------------------------------------------------------------------------function ProcessImages(myLinks) {	var myStop = myLinks.length;	var myPbValue = 1;	var myWindow = new Window ( 'window', localize({en: 'Resize Images Script', ru: 'Пересчёт картинок', fr:'Script de redimensionnement d\'images'}) );	var myProgressBar = myWindow.add ('progressbar', [12, 12, 350, 24], 0, myStop);	var myStaticText = myWindow.add('statictext');	myStaticText.bounds = [0, 0, 340, 20];	myStaticText.alignment = "left";	myWindow.show();	for (var myCounter = myLinks.length - 1; myCounter  >= 0; myCounter --) {		var myLink = myLinks[myCounter];				myProgressBar.value = myPbValue;		myStaticText.text = (localize({en: 'Resizing - ', ru: 'Пересчитываю - ', fr: 'Redimensionnement - '}) + myLink.name);		myWindow.text = localize({en: 'Image ', ru: 'Картинка ', fr: 'Images'}) + myPbValue + localize({en: ' out of ', ru: ' из ', fr:' au del\u00E0 de '}) + myLinks.length;		myPbValue++;				ResizeImage(myLink);	}	myWindow.close();}//--------------------------------------------------------------------------------------------------------------function LinkUsage(myLink) {	var myLinkCounter = 0;		for (var myCounter =  0; myCounter < myAllLinks.length; myCounter++) {		if (myLink.filePath == myAllLinks[myCounter].filePath) {			myLinkCounter++;		}	}	return myLinkCounter}//--------------------------------------------------------------------------------------------------------------function CheckMissingLinks() {	var myMissingLinks = [];	for (var o = 0; o < myAllLinks.length; o++) {		var myLink = myAllLinks[o];		if (myLink.parent.constructor.name == "Image") {			var myLink = myDoc.links[o];			if (myLink.status == LinkStatus.linkMissing) {				myMissingLinks.push(myLink);			}		}	}	if (myMissingLinks.length == 1) {		myMissingLinks[0].show();		var myConfirm = confirm(localize({en: 'This link is missing, do you want to stop the script and repair it?', ru: 'Внимание! Этот линк потерянный.  Хотите остановить скрипт и исправить?', fr:'Le lien est manquant, voulez-vous arr\u00E7ter le script et le r\u00E9parer ?'}), false, localize({en: 'Resize Images Script', ru: 'Пересчёт картинок', fr:'Script de redimensionnement d\'image'}));		if (myConfirm) {			exit();		}	}	else if (myMissingLinks.length > 1) {		var myImg =  localize({en: ' images', fr: ' images', ru: ' картинок'});		var myMessage1 = localize({en: 'The document contains ', ru: 'Этот документ содержит ', fr:'Le document contient '}) + myMissingLinks.length + localize({en: ' missing' + myImg + ': ', ru: ' потерянных' + myImg + ': ', fr: + myImg + ' liens manquants'});		var myMessage2 = "";		for (var p = 0; p < myMissingLinks.length; p++) {			var myMissingLink = myMissingLinks[p];			var myNumber = ( (p + 1) <10 ) ? "  " + (p + 1) + ". " : (p + 1) + ". ";			myMessage2 += myNumber + myMissingLink.name + "\r";		}		CreateCheckDialog(myMessage1, myMessage2, localize({en: 'Missing Links', ru: 'Потерянные картинки', fr: 'Liens manquants'}));	}}//--------------------------------------------------------------------------------------------------------------function CheckEffectivePpi() {	var myLowResImages = [];	for (var o = 0; o < myAllLinks.length; o++) {		var myLink = myAllLinks[o];		if (myLink.parent.constructor.name == "Image") {			var myImage = myLink.parent;			if (myImage.effectivePpi[0] < mySettings.minimumRes || myImage.effectivePpi[1] < mySettings.minimumRes) {				myLowResImages.push(myImage);			}		}	}	if (myLowResImages.length == 1) {		myLowResImages[0].itemLink.show();		var myConfirm = confirm(localize({en: 'Effective resolution of this link is below '  + mySettings.minimumRes + ' ppi, do you want to stop the script and repair it?', ru: 'Внимание! эффективное разрешение этой картинки ниже '  + mySettings.minimumRes + ' ppi. Хотите остановить скрипт и исправить?', fr: 'La r\u00E9solution r\u00E9elle de cette image est en dessous de '  + mySettings.minimumRes +  ' ppp\nSouhaitez-vous arrêter le script et corriger ?'}), false, localize({en: 'Resize Images Script', ru: 'Пересчёт картинок', fr: 'Script de redimensionnement d\'images'}));		if (myConfirm) {			exit();		}	}	else if (myLowResImages.length > 1) {		var myImg =  localize({en: ' images', fr: ' images', ru: ' картинок'});		var myMessage1 = localize({en: 'The document contains ', ru: 'Этот документ содержит ', fr: 'Le document contient '}) + myLowResImages.length + myImg + localize({en: ', effective resolution of which is below ', ru: ' эффективное разрешение которых меньше ', fr:'images de r\u00E9solution inf\u00E9rieure \u00E0'}) + mySettings.minimumRes + localize({en:' ppi: ', fr: 'ppp : ', ru: 'ppi: '});		var myMessage2 = "";		for (p = 0; p < myLowResImages.length; p++) {			var myLowResImage = myLowResImages[p];			if (myLowResImages.length == 1) {				var myNumber = "";			}			else {				var myNumber = ( (p + 1) <10 ) ? "  " + (p + 1) + ". " : (p + 1) + ". ";			}			myMessage2 += myNumber + myLowResImage.itemLink.name + " -- " + myLowResImage.effectivePpi[0] + "x" + myLowResImage.effectivePpi[1] + " ppi\r";		}		CreateCheckDialog(myMessage1, myMessage2, localize({en: 'Low resolution images', ru: 'Картинки с низким разрешением', fr: 'Images basse r\u00E9solution'}));	}}//--------------------------------------------------------------------------------------------------------------function CreateCheckDialog(myMessage1, myMessage2, myTitle) {	var dlg = new Window('dialog', myTitle); // localize({en: 'Low Resotution Images', ru: 'Картинки с низким разрешением', fr: 'images de faible r\u00E9solution'}));	dlg.st1 = dlg.add('statictext', undefined, myMessage1);	dlg.et = dlg.add('edittext', undefined, myMessage2, {multiline:true, scrolling:true, readonly:true});	dlg.et.alignment = 'fill';	dlg.et.maximumSize = [600, 350];	dlg.st2 = dlg.add('statictext', undefined, localize({en: 'Do you want to interrupt the script and correct the problem?', ru: 'Хотите остановить скрипт и исправить?', fr: 'Souhaitez-vous stopper le script et corriger le probl\u00E8me ?'}));	// Group	dlg.grp = dlg.add('group');	dlg.grp.orientation = 'row';	dlg.grp.alignChildren = 'top';	// Ok and Cancel buttons	dlg.grp.okBtn = dlg.grp.add('button', undefined, localize({en: 'Yes', ru: 'Да', fr: 'Oui'}), {name: 'ok'}); // 1	dlg.grp.cancelBtn = dlg.grp.add('button', undefined, localize({en: 'No', ru: 'Нет', fr: 'Non'}), {name: 'cancel'}); // 2	// Show dialog	var myDialogResult = dlg.show();	if (myDialogResult == 1) {		exit();	}}//--------------------------------------------------------------------------------------------------------------function GetAllLinks() {	if (mySettings.selImgCb) { // Process only selected images		var myGetAllLinks = [];		if (app.selection.length == 1) { // one object is selected			if (app.selection[0].constructor.name == "Image" || app.selection[0].constructor.name == "EPS") { // one image selected with white arrow				myGetAllLinks.push(app.selection[0].itemLink);			}			else if (app.selection.length == 1 && app.selection[0].allGraphics.length == 1) { // one image selected with black arrow - that is its container				if (app.selection[0].allGraphics[0].constructor.name == "Image" || app.selection[0].allGraphics[0].constructor.name == "EPS") {					myGetAllLinks.push(app.selection[0].allGraphics[0].itemLink);				}			}		}		else if (app.selection.length > 1) {			myGetAllLinks = mySelectedLinks;		}	}	else { // only selected checkbox is off		var myGetAllLinks = myDoc.links;	}	return myGetAllLinks;}//--------------------------------------------------------------------------------------------------------------function IsObjInArray(myObj, myArray) {	for (x in myArray) {		if (myObj.filePath == myArray[x].filePath) {			return true;		}	}	return false;}//--------------------------------------------------------------------------------------------------------------function GetSettings() {	mySettings = eval(app.extractLabel("Kas_ResizeImages_Settings_ver2.0"));	if (mySettings == undefined) {		alert("Creating default settings");		mySettings = { ignoredFolders:[], masterPagesCb:true, anchoredCb:true, pasteboardCb:false, checkMissingCb:true, reportCb:true, checkResCb:true , minimumRes:260, selImgCb:false, desiredRes:300, enlargedCb:true, reducedCb:true, reducedDropDownList:4, enlargedDropDownList:3 };	}	return mySettings;}//--------------------------------------------------------------------------------------------------------------function CreateBridgeTalkMessage(myPath, myHorScale, myVerScale, myResolution, myResampleMethod) {	var bt = new BridgeTalk();	bt.target = "photoshop";	var myScript = ResizeInPS.toString() + '\r';	myScript += 'ResizeInPS(\"' + myPath + '\", \"' + myHorScale + '\", \"' + myVerScale + '\", \"' + myResolution + '\", \"' + myResampleMethod + '\", \"' + myIsJpeg + '\");';	bt.body = myScript;//~ 	$.write(myScript);//~ 	exit();	bt.onResult = function(resObj) {} 	bt.send(100);}//--------------------------------------------------------------------------------------------------------------function ResizeInPS(myPath, theHorScale, theVerScale, myResolution, myResampleMethod, myIsJpeg) {	try {		if (theHorScale == "undefined") {			var myHorScale = undefined;		}		else {			var myHorScale = eval(new UnitValue(theHorScale, '%'));		}			if (theVerScale == "undefined") {			var myVerScale = undefined;		}		else {			var myVerScale = eval(new UnitValue(theVerScale, '%'));		}		var myPsDoc = app.open(new File(myPath));		myPsDoc.resizeImage(myHorScale, myVerScale, eval(myResolution), eval(myResampleMethod));				if (myIsJpeg == true) {			var myJpgSaveOptions = new JPEGSaveOptions();			myJpgSaveOptions.quality = 12;			myPsDoc.saveAs(new File(myPath), myJpgSaveOptions, true);			myPsDoc.close(SaveOptions.DONOTSAVECHANGES);		}		else {			myPsDoc.save();			myPsDoc.close();		}	}	catch (myError) {		myPsError += "myError -- " + myPath + "\n";	}}//--------------------------------------------------------------------------------------------------------------function ProcessSelection() {	var myGetAllLinks = [];	if (app.selection.length == 1) { // one object is selected		if (app.selection[0].constructor.name == "Image" || app.selection[0].constructor.name == "EPS") { // one image selected with white arrow			myGetAllLinks.push(app.selection[0].itemLink);		}		else if (app.selection.length == 1 && app.selection[0].allGraphics.length == 1) { // one image selected with black arrow - that is its container			if (app.selection[0].allGraphics[0].constructor.name == "Image" || app.selection[0].allGraphics[0].constructor.name == "EPS") {				myGetAllLinks.push(app.selection[0].allGraphics[0].itemLink);			}		}	}	else if (app.selection.length >= 1) { // Process all graphics in all selections		for (var l =  0; l < app.selection.length; l++) { // loop trough all selections			var mySel = app.selection[l];			if (mySel.constructor.name == "Image" || mySel.constructor.name == "EPS") {				myGetAllLinks.push(mySel.itemLink);			}			else if (mySel.allGraphics.length > 0) {				for (var m =  0; m < mySel.allGraphics.length; m++) {					try {						var myCurrentLink = mySel.allGraphics[m].itemLink;						myGetAllLinks.push(myCurrentLink);					}					catch(e) {						$.writeln("Error -- " + e.message);					}				}			}		} // end loop trough all selections	} // end process all graphics in all selections	return myGetAllLinks;}//--------------------------------------------------------------------------------------------------------------//--------------------------------------------------------------------------------------------------------------//--------------------------------------------------------------------------------------------------------------