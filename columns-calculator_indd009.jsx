/******************************************************************//*                                                                *//*            Author: Frédéric ROBIN (robinfredericf)             *//*                                                                *//*        http://robinfredericf.free.fr                           *//*        http://fr.viadeo.com/fr/profile/robinfredericf          *//*        http://plus.google.com/u/0/112815740483397412444        *//*                                                                *//*                    robinfredericfҨgmaїl·cѳm                    *//*                                                                *//******************************************************************/#target "InDesign";#targetengine "session";$.localize = true;$.locale = null;//$.locale = "en";var centVingtSeptMillimetres = {     /*        pour chaque unité sélectionnée dans les préférences d'unité de mesure d'InDesign         on répertorie les dimensions affichées d'un carré de 127 mm.        Les unités désactivées sont supposées exister d'après        http://jongware.mit.edu/idcs5js/pc_ViewPreference.html        mais ne peuvent être sélectionnées ni par la         fenêtre des préférences ni par javascript.        Pour CUSTOM « Personnalisées » on est supposé spécifier un nombre de points         (12 par défaut) mais l'affichage des dimensions est toujours en points.    */    POINTS: 360,    PICAS: 30,    INCHES: 5,    INCHES_DECIMAL: 5,    MILLIMETERS: 127,    CENTIMETERS: 12.7,    CICEROS: 84.455/3, //28.1516666666899    CUSTOM: 360,     AGATES: 70,    //U    //BAI    //MILS    PIXELS: 360,    //Q    //HA    //AMERICAN_POINTS};convertirUnites = function (n0, u0, u1) {    var n1 = n0 * centVingtSeptMillimetres[u1] / centVingtSeptMillimetres[u0];    //alert (n0 + " " + u0 + " \u2192 " + n1 + " " + u1);    return n1;};function traiterSaisieNumerique (saisie) {    saisie = saisie.replace (/\s+/g, "") ;    var formuleMath = /^[0-9\.\,\+\-\*\/\%\(\)]+$/ ;    //if (formuleMath.test(saisie)) { alert ("saisie expression mathématique") } else { alert ("saisie n'importe quoi") }    if (formuleMath.test(saisie)) {        // Traitement permettant la saisie d'expression mathématiques avec addition soustraction multiplication division modulo et les parenthèses pour gérer les priorités        saisie = saisie.replace (/\,/g, ".") ;        // permet l'évaluation correcte des nombres décimaux saisis avec le format français avec la virgule comme séparateur        saisie = saisie.replace (/(^|[^0-9\.])0+/g, "$1") ;        // supprime les zéros en début de nombres avant l'évaluation de l'expression pour empêcher les décomptes d'être interprétés comme des nombres octaux        saisie = eval (saisie) ;    } else {        saisie = saisie.replace (/\D/g, "") ;    }    saisie = Number (saisie) ;    return ((isNaN (saisie)) ? 0 : saisie) ;}var prefs = File($.fileName).name.replace(/\W/g, ''); // préférences mémorisées sour un nom spécifique au script actif pour éviter les conflit avec les préférences d'autres scriptsif (! (prefs in $.global)) {    $.global[prefs] = {        //increment: .005,        // valeur raisonnable quand on est en millimètres ou centimètres mais pas si on est en points        increment: app.activeDocument.viewPreferences.cursorKeyIncrement,        gouttiereGauche: { value: false },        gouttiereDroite: { value: false },    };}if (! increment) { var increment = $.global[prefs].increment; }function calculColonnesBlocTexte() {        if (app.activeDocument.selection.length !== 1) {        throw new Error ({fr:"Il faut sélectionner un bloc texte (et rien d'autre).",en:"You need to select a text frame (and nothing else)."});    }    var leBloc = app.activeDocument.selection[0];    if (! ('textFramePreferences' in leBloc)) {        throw new Error ({fr:"L'objet sélectionné n'est pas un bloc texte.",en:"The selected item is not a text frame."});    }    var fenetreInvite = new Window ('dialog', {fr:"Calcul de largeurs de colonnes et gouttières",en:"Columns and gutters computation"});    fenetreInvite.alignChildren = 'left';    fenetreInvite.add ('statictext', undefined, fenetreInvite.text + {fr:" pour un bloc texte ",en:" for a text trame "});    with (fenetreInvite.add ('group', undefined, undefined, {orientation:'row'})) {        add (            'statictext',             undefined,             {fr:"d'une largeur ",en:"of width "}                + ((leBloc.horizontalScale !== 100)?{fr:"(en ignorant les transformations) ",en:"(ignoring transformations)"}:"")                 +{fr:"de ",en:""}        );        var largeurSaisie = add ('edittext', undefined, leBloc.getWidthFor1Col());        /*            la largeur suggérée ne tient pas compte des éventuelles marges droites et gauches préexistantes qui sont             supprimées pour être éventuellement remplacées ensuite par une valeur égale à la largeur de gouttière.        */        largeurSaisie.characters = 16;    }    with (fenetreInvite.add ('group', undefined, undefined, {orientation:'row'})) {        add('statictext', undefined, {fr:"comportant",en:"with"});        var nombreColonnesSaisie = add ('edittext', undefined, leBloc.textFramePreferences.textColumnCount);        nombreColonnesSaisie.characters = 4;        add ('statictext', undefined, {fr:"colonnes",en:"columns"});    }    with (fenetreInvite.add ('group', undefined, undefined, {orientation:'row'})) {        add ('statictext', undefined, {fr:"avec des valeurs multiples de ",en:"by values multiples of "});        var incrementSaisie = add ('edittext', undefined, increment);        incrementSaisie.characters = 16;            }    with (fenetreInvite.add ('group', undefined, undefined, {orientation:'row'})) {        add ('statictext', undefined, {fr:"Ajouter une gouttière supplémentaire (marge)",en:"Add extra gutter (margin)"});        var gouttiereGauche = add ('checkbox', undefined, {fr:" à gauche",en:" to the left"});        var gouttiereDroite = add ('checkbox', undefined, {fr:" à droite",en:" to the right"});        gouttiereGauche.characters = gouttiereDroite.characters = 10;        gouttiereGauche.value = $.global[prefs].gouttiereGauche.value;        gouttiereDroite.value = $.global[prefs].gouttiereDroite.value;    }        with (fenetreInvite.add ('group', undefined, undefined, {orientation:'row'})) {        add ('button', undefined, "Cancel");        add ('button', undefined, "OK");    }    if (fenetreInvite.show() !== 1) { return false; }        var largeur = traiterSaisieNumerique (largeurSaisie.text);    // "largeur" doit bien sûr en principe être multiple de "increment"    // mais ça passe quand même si le reste de division n'excède pas la valeur de "precision".    var nbColonnes = traiterSaisieNumerique (nombreColonnesSaisie.text);    var nbGouttieres = nbColonnes-1;    if (gouttiereGauche.value) { nbGouttieres++; }    if (gouttiereDroite.value) { nbGouttieres++; }    increment = traiterSaisieNumerique (incrementSaisie.text);        $.global[prefs] = {        increment: increment,        gouttiereGauche: { value: gouttiereGauche.value },        gouttiereDroite: { value: gouttiereDroite.value },    };    var resultats = new Array;    function arrondirALincrement(n) {        return increment*Math.round(n/increment);    }    var precision=.00001;    // La largeur d'une colonne ne peut pas être inférieure à 3 points quelle que soit l'unité de mesure du document    var colonneMinimale = increment*Math.ceil(convertirUnites (3, 'POINTS', app.activeDocument.viewPreferences.horizontalMeasurementUnits)/increment);    //alert (colonneMinimale +" "+ app.activeDocument.viewPreferences.horizontalMeasurementUnits);    for (        var i=colonneMinimale;         i<=(largeur/nbColonnes);         i=arrondirALincrement(i+increment)    ) {        var gouttiere=(largeur-nbColonnes*i)/(nbGouttieres);        if (gouttiere%increment<=precision || gouttiere%increment>=increment-precision) {             resultats.push ([arrondirALincrement(i), arrondirALincrement(gouttiere)]);        }    }    if (resultats.length === 0) {         alert (            {fr:"Aucun résultat trouvé pour une valeur d'incrément de ",en:"No result found for an increment value of "}            + increment + "\r\n"            +{fr:"Essayez avec une valeur plus petite.",en:"Try with a smaller value."}        );        return false;    }    resultats.reverse(); // les colonnes les plus larges et les gouttières les plus étroites en tête de liste    var fenetreResultats = new Window ('dialog', {fr:"Résultats trouvés",en:"Results found"});    fenetreResultats.add ('statictext', undefined, resultats.length+{fr:" possibilités :",en:" possibilities :"} );    var explicationResultats = new Array;    for (var i=0; i<resultats.length; i++) {        explicationResultats.push (            {fr:"Colonnes",en:"Columns"} + " : " + resultats[i][0] + " \u2192 "            +{fr:"gouttières",en:"gutters"} + " : " + resultats[i][1]        );    }    listeResultats = fenetreResultats.add ('dropdownlist', undefined, explicationResultats);        with (fenetreResultats.add ('group', undefined, undefined, {orientation:'row'})) {        add ('button', undefined, "Cancel");        add ('button', undefined, "OK");    }        if (fenetreResultats.show() !== 1) { return false; }     resultatChoisi = resultats[listeResultats.selection.index] ;    // useFlexibleColumnWidth nouvelle propriété qui n'existe pas dans CS5    if ('useFlexibleColumnWidth' in leBloc.textFramePreferences) {        leBloc.textFramePreferences.useFlexibleColumnWidth = false ;    }    leBloc.textFramePreferences.useFixedColumnWidth = true;    leBloc.textFramePreferences.textColumnFixedWidth = resultatChoisi[0];    leBloc.textFramePreferences.textColumnCount = nbColonnes;    leBloc.textFramePreferences.textColumnGutter = resultatChoisi[1];    var lbtfpis = leBloc.textFramePreferences.insetSpacing;    leBloc.textFramePreferences.insetSpacing = [        lbtfpis[0],        gouttiereGauche.value ? resultatChoisi[1] : 0,        lbtfpis[2],        gouttiereDroite.value ? resultatChoisi[1] : 0    ];}TextFrame.prototype.getWidthFor1Col = function () {    var docTmp = app.documents.add(/*showingWindow:*/false);    var textFrameTmp = this.duplicate(docTmp.masterSpreads[0].pages[0]);    if ('useFlexibleColumnWidth' in textFrameTmp.textFramePreferences) {        textFrameTmp.textFramePreferences.useFlexibleColumnWidth = false ;    }    textFrameTmp.textFramePreferences.useFixedColumnWidth = false;    textFrameTmp.textFramePreferences.insetSpacing = [0, 0, 0, 0];    textFrameTmp.textFramePreferences.textColumnCount = 1;    var resultat = textFrameTmp.textFramePreferences.textColumnFixedWidth;    docTmp.close(SaveOptions.NO);    return resultat;}try {     app.doScript(        function() { calculColonnesBlocTexte (); },        ScriptLanguage.JAVASCRIPT,        undefined,        UndoModes.ENTIRE_SCRIPT,        File($.fileName).name    );} catch(e) { alert(e); }